#! /usr/bin/env python

import argparse
import logging
import nbformat as nbf
import os

from okra.logging_utils import enable_cloud_log

logger = logging.getLogger(__name__)

class _HelpAction(argparse._HelpAction):
    """ Reference: https://stackoverflow.com/questions/20094215 """

    def __call__(self, parser, namespace, values, option_string=None):
        parser.print_help()

        # retrieve subparsers from parser
        subparsers_actions = [
                action for action in parser._actions
                if isinstance(action, argparse._SubParsersAction)]

        # there will probably only be one subparser_action,
        # but better safe than sorry

        for subparsers_action in subparsers_actions:

            # get all subparsers and print help

            for choice, subparser in subparsers_action.choices.items():

                print("Subparser '{}'".format(choice))
                print(subparser.format_help())

            parser.exit()


parser = argparse.ArgumentParser(add_help=False)

parser.add_argument('--help', action=_HelpAction, help='big help')
parser.add_argument('task', action='store_true', help='name of task to perform (compute)')

# Configure logging

enable_cloud_log(level='INFO')

subparsers = parser.add_subparsers(help='commands', dest='commands')
command_parser = subparsers.add_parser('compute', help='compute command')
command_parser.add_argument('-y', '--yes', default='yes', type=str, help='Provide permission to clone a repo from the command line')
command_parser.add_argument('-cd', '--clonedir', default='./', type=str, help='Provide location of directory for a cloned repository')
parser.add_argument('-d', '--dir', default='.', type=str, help='Directory in which to create Jupyter notebook')
command_parser.add_argument('repo', metavar='repo', type=str, nargs=1, help='url of the repository')
command_parser.set_defaults(which='compute')
args = parser.parse_args()

# Configure logging
enable_cloud_log(level='INFO')

if args.commands == 'compute':
    nb = nbf.v4.new_notebook()
    nb_name = 'owner_name_hash.ipynb'
    print("path: " + os.path.join(args.dir, nb_name))
    #nbf.write(nb, os.path.joins(args.dir, nb_name))
