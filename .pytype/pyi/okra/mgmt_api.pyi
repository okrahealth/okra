# (generated with --quick)

import okra.models
from typing import Any, List, Optional, Tuple, Type, TypeVar

Author: Type[okra.models.Author]
CommitFile: Type[okra.models.CommitFile]
Contrib: Type[okra.models.Contrib]
DataAccessLayer: Type[okra.models.DataAccessLayer]
Meta: Type[okra.models.Meta]
datetime: Type[datetime.datetime]
func: Any
logger: logging.Logger
logging: module
okra_api_pb2: module
os: module

AnyStr = TypeVar('AnyStr', str, bytes)
_T0 = TypeVar('_T0')

def date_toiso(datetime, timespec = ...) -> Any: ...
def find_author_count(dal: okra.models.DataAccessLayer, yearmo = ...) -> Any: ...
def find_contributor_count(dal: okra.models.DataAccessLayer, yearmo = ...) -> Any: ...
def find_file_metrics(dal: okra.models.DataAccessLayer, yearmo = ...) -> Any: ...
def get_bus_factor(dal, yearmo = ...) -> Tuple[int, List[Tuple[Any, Any]]]: ...
def get_truck_factor_by_project(owner, project, dal) -> Tuple[int, List[Tuple[Any, Any]]]: ...
def hist_start_yearmo(dal: okra.models.DataAccessLayer) -> Any: ...
def iso_date_aggregation(dal: okra.models.DataAccessLayer, yearmo = ...) -> Any: ...
def msg_iso_date_aggregation(msg: _T0, item, status: str, yearmo: str) -> _T0: ...
def msg_repo_history_metric(dal: okra.models.DataAccessLayer, repo_id: str, yearmo: str) -> Any: ...
def msg_repository_info(dal: okra.models.DataAccessLayer, repo_id: str, yearmo: str) -> Any: ...
def msg_repository_metric(dal: okra.models.DataAccessLayer, repo_id: str, yearmo: str) -> Any: ...
def repo_info(dal: okra.models.DataAccessLayer, yearmo = ...) -> Any: ...
def total_number_of_contributors_by_project(owner, project, dal) -> int: ...
def total_number_of_files_by_project(owner, project, dal) -> int: ...
def urljoin(base: AnyStr, url: Optional[AnyStr], allow_fragments: bool = ...) -> AnyStr: ...
